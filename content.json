[{"title":"mysql索引的数据结构和算法","date":"2017-10-19T06:40:21.000Z","path":"2017/10/19/mysql索引的数据结构和算法/","text":"摘要大学里面，学习数据结构与算法时，里面讲到：程序=数据结构+算法，不过写了这几年代码，始终没感觉有用到数据结构和算法。近来，偶尔看到有文章写mysql索引后的数据结构和算法，颇有收获，特此记录下重点。 文章主要分三部分： 从数据结构及算法理论层面讨论MySQL数据库索引的数理基础。 MySQL数据库中MyISAM和InnoDB数据存储引擎中索引的架构实现讨论聚集索引、非聚集索引及覆盖索引等 探讨如何在MySQL中高性能使用索引的 数据结构和算法索引本质 MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：索引是数据结构。 我们知道，数据库查询是数据库的最主要功能之一。我们都希望查询数据的速度能尽可能的快，因此数据库系统的设计者会从查询算法的角度进行优化。最基本的查询算法当然是顺序查找（linear search），这种复杂度为O(n)的算法在数据量很大时显然是糟糕的，好在计算机科学的发展提供了很多更优秀的查找算法，例如二分查找（binary search）、二叉树查找（binary tree search）等。如果稍微分析一下会发现，每种查找算法都只能应用于特定的数据结构之上，例如二分查找要求被检索数据有序，而二叉树查找只能应用于二叉查找树上，但是数据本身的组织结构不可能完全满足各种数据结构（例如，理论上不可能同时将两列都按顺序进行组织），所以，在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。 看个例子 图中展示了一种可能的索引方式。左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在O(log2n)O(log2n)的复杂度内获取到相应数据。 这是一个货真价实的索引，但是实际的数据库系统几乎没有使用二叉查找树或其进化品种红黑树（red-black tree）实现的，原因会在下文介绍。 B-Tree和B+Tree目前大部分数据库系统及文件系统都采用B-Tree或其变种B+Tree作为索引结构，在本文的下一节会结合存储器原理及计算机存取原理讨论为什么B-Tree和B+Tree在被如此广泛用于索引，这一节先单纯从数据结构角度描述它们。 B-Tree为了描述B-Tree，首先定义一条数据记录为一个二元组[key, data]，key为记录的键值，对于不同数据记录，key是互不相同的；data为数据记录除key外的数据。那么B-Tree是满足下列条件的数据结构： d为大于1的一个正整数，称为B-Tree的度。2.h为一个正整数，称为B-Tree的高度。 每个非叶子节点由n-1个key和n个指针组成，其中d&lt;=n&lt;=2d。 每个叶子节点最少包含一个key和两个指针，最多包含2d-1个key和2d个指针，叶节点的指针均为null 。5.所有叶节点具有相同的深度，等于树高h。6.key和指针互相间隔，节点两端是指针。7.一个节点中的key从左到右非递减排列。8.所有节点组成树结构。 每个指针要么为null，要么指向另外一个节点。 如果某个指针在节点node最左边且不为null，则其指向节点的所有key小于v(key1)，其中v(key1)为node的第一个key的值。 如果某个指针在节点node最右边且不为null，则其指向节点的所有key大于v(keym)，其中v(keym)为node的最后一个key的值。 如果某个指针在节点node的左右相邻key分别是keyi和keyi+1且不为null，则其指向节点的所有key小于v(keyi+1)且大于v(keyi)。 如图是个d=2的B-Tree示意图 由于B-Tree的特性，在B-Tree中按key检索数据的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到null指针，前者查找成功，后者查找失败。B-Tree上查找算法的伪代码如下： 123456789101112131415161718192021BTree_Search(node, key)&#123; if(node == null) return null; foreach(node.key) &#123; if(node.key[i] == key) return node.data[i]; if(node.key[i] &gt; key) return BTree_Search(point[i]-&gt;node); &#125; return BTree_Search(point[i+1]-&gt;node);&#125; data = BTree_Search(root, my_key); 关于B-Tree有一系列有趣的性质，例如一个度为d的B-Tree，设其索引N个key，则其树高h的上限为logd((N+1)/2)，检索一个key，其查找节点个数的渐进复杂度为O(logdN)。从这点可以看出，B-Tree是一个非常有效率的索引数据结构。 另外，由于插入删除新的数据记录会破坏B-Tree的性质，因此在插入删除时，需要对树进行一个分裂、合并、转移等操作以保持B-Tree性质，本文不打算完整讨论B-Tree这些内容，因为已经有许多资料详细说明了B-Tree的数学性质及插入删除算法。 B+TreeB-Tree有许多变种，其中最常见的是B+Tree，例如MySQL就普遍使用B+Tree实现其索引结构。 与B-Tree相比，B+Tree有以下不同点：1.每个节点的指针上限为2d而不是2d+1。2.内节点不存储data，只存储key；叶子节点不存储指针。 如图所示是个简单的B+Tree MySQL索引实现在MySQL中，索引属于存储引擎级别的概念，不同存储引擎对索引的实现方式是不同的，本文主要讨论MyISAM和InnoDB两个存储引擎的索引实现方式。 MyISAM索引实现MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。下图是MyISAM索引的原理图： 这里设表一共有三列，假设我们以Col1为主键，则图8是一个MyISAM表的主索引（Primary key）示意。可以看出MyISAM的索引文件仅仅保存数据记录的地址。在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。如果我们在Col2上建立一个辅助索引，则此索引的结构如下图所示： 同样也是一颗B+Tree，data域保存数据记录的地址。因此，MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。 MyISAM的索引方式也叫做“非聚集”的，之所以这么称呼是为了与InnoDB的聚集索引区分 InnoDB索引实现虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同。 第一个重大区别是InnoDB的数据文件本身就是索引文件。从上文知道，MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。 图中是InnoDB主索引（同时也是数据文件）的示意图，可以看到叶节点包含了完整的数据记录。这种索引叫做聚集索引。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。 第二个与MyISAM索引的不同是InnoDB的辅助索引data域存储相应记录主键的值而不是地址。换句话说，InnoDB的所有辅助索引都引用主键作为data域。例如，下图为定义在Col3上的一个辅助索引： 这里以英文字符的ASCII码作为比较准则。聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。 了解不同存储引擎的索引实现方式对于正确使用和优化索引都非常有帮助，例如知道了InnoDB的索引实现后，就很容易明白为什么不建议使用过长的字段作为主键，因为所有辅助索引都引用主索引，过长的主索引会令辅助索引变得过大。再例如，用非单调的字段作为主键在InnoDB中不是个好主意，因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。 **如何在MySQL中高性能使用索引，将会在一篇文章继续探讨 ​","tags":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"},{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"},{"name":"索引","slug":"索引","permalink":"http://yoursite.com/tags/索引/"}]},{"title":"private和protected的问题","date":"2017-10-12T12:08:59.000Z","path":"2017/10/12/private和protected的问题/","text":"一、二者区别 加上public 内部 子类 外部 public √ √ √ protected √ √ × private √ × × 二、问题分析(1)看下面两段代码 代码1 12345678910111213141516171819202122232425class Human &#123; protected $name = &apos;li san&apos;; protected $money; public $age ;&#125;class Stu extends Human &#123; public function __construct() &#123; $this-&gt;name = &apos;li si&apos;; $this-&gt;money = 300; $this-&gt;age = 26; &#125; private $friend = &apos;zhang san&apos;; public function talk() &#123; echo &apos;我叫&apos;.$this-&gt;name.PHP_EOL; &#125;&#125;$ming = new Stu();$ming-&gt;talk();echo $ming-&gt;name.PHP_EOL; 运行结果：12我叫li siPHP Fatal error: Cannot access protected property Stu::$name 将类human中的name属性改为 private，得到代码2 代码2 12345678910111213141516171819202122232425class Human &#123; private $name = &apos;li san&apos;; protected $money; public $age ;&#125;class Stu extends Human &#123; public function __construct() &#123; $this-&gt;name = &apos;li si&apos;; $this-&gt;money = 300; $this-&gt;age = 26; &#125; private $friend = &apos;zhang san&apos;; public function talk() &#123; echo &apos;我叫&apos;.$this-&gt;name.PHP_EOL; &#125;&#125;$ming = new Stu();$ming-&gt;talk();echo $ming-&gt;name.PHP_EOL; 运行结果：12我叫li sili si (2)结论 代码1中name属性为protected ，代码2中为private，为什么在代码1中访问name会报错，反而2中不会报错 根据上面的private和protected的区别，父类的name为private时，子类时访问不到的，此时子类的构造方法里面$this-&gt;name，相当于==新建了一个name属性且为public==，所以能访问；父类的name为protected时，==子类修改的其实是继承过来的protected属性==，外部当然不能访问了","tags":[{"name":"问题探究","slug":"问题探究","permalink":"http://yoursite.com/tags/问题探究/"}]},{"title":"php浮点数问题","date":"2017-10-07T07:44:58.000Z","path":"2017/10/07/php浮点数问题/","text":"一、两个浮点数运算问题1、小数乘以100 代码： 1234$a = 20.40;echo $a.PHP_EOL;$b = intval($a*100);echo $b.PHP_EOL; 结果： 1220.42039 再看另一段代码： 1234567$a = 20.4;$b = $a * 100; //其实很多小数都有类似问题，也不限于PHPecho (string) $b . PHP_EOL;echo (int) $b .PHP_EOL;echo floor($b) .PHP_EOL;echo ceil($b) . PHP_EOL;echo (int)(string) $b . PHP_EOL; 运行结果： 1234520402039203920402040 2、两个浮点数比较大小 代码： 12345$a = 0.1;$b = 0.9;$c = 1;var_dump(($a+$b)==$c);var_dump(($c-$b)==$a); 运行结果： 12truefalse 看完这两个问题，我相信很多同学会有一种疑问，这个是php的bug吗？且看下面的问题分析 二、问题分析1、浮点数的表示要搞明白这个原因, 首先我们要知道浮点数的表示(IEEE 754): 浮点数, 以64位的长度(双精度)为例, 会采用1位符号位(E), 11指数位(Q), 52位尾数(M)表示(一共64位) 符号位：最高位表示数据的正负，0表示正数，1表示负数。 指数位：表示数据以2为底的幂，指数采用偏移码表示 尾数：表示数据小数点后的有效数字.然后我们需要了解的是浮点数如何转换为二进制数 2、浮现数转二进制方法 整数部分采用除以2取余方法 小数部分采用乘以2取整方法 例如： 把数字8.5转为二进制 整数部分是8 8/2=4 8%2=0 4/2=2 4%2=0 2/2=1 2%2=0 1比2小，因此不需要计算下去，整数8的二进制为 1000 小数部分是0.5 0.5x2 = 1.0 因取整后小数部分为0，因此不需要再计算下去 小数0.5的二进制为 0.1 8.5的二进制为1000.1 3、运算问题1 根据上面关于浮点数表示的解释，20.4转换为二进制64位浮点数为：0100000000110100011001100110011001100110011001100110011001100110,小数部分0.4转换为二进制来说，是无限长的，再乘以100时，截断52位来计算的话就是20.399999999…,再乘以100，int转换为整数，就是2039了 4、运算问题2这个问题中，0.9在转换为二进制时，同样也会有精度丢失的问题 看下面这段代码： 12345$a = 0.1;$b = 0.9;$c = 1;printf(&quot;%.20f&quot;, $a+$b);printf(&quot;%.20f&quot;, $c-$b); 运行结果： 121.000000000000000000000.09999999999999997780 三、综合1、简单乘法 我在开发时，曾经多次遇到小数乘以100，得到错误结果的问题，初步可以转换为string类型解决 2、高精度运算方法 使用高精度的运算方法，这样可以保证精度不丢失。 高精度运算的方法如下： bcadd 将两个高精度数字相加 bccomp 比较两个高精度数字，返回-1,0,1 bcdiv 将两个高精度数字相除 bcmod 求高精度数字余数 bcmul 将两个高精度数字相乘 bcpow 求高精度数字乘方 bcpowmod 求高精度数字乘方求模 bcscale 配置默认小数点位数，相当于Linux bc中的”scale=” csqrt 求高精度数字平方根 bcsub 将两个高精度数字相减 代码：12345$a = 0.1;$b = 0.9;$c = 1;var_dump(($c-$b)==$a);var_dump(bcsub($c, $b, 1)==$a); 运行结果：12falsetrue php计算的问题还有可能和操作系统的位数相关，比如32位和64位，这些大家可以研究下~","tags":[{"name":"php","slug":"php","permalink":"http://yoursite.com/tags/php/"}]},{"title":"序言","date":"2017-10-06T03:53:03.000Z","path":"2017/10/06/随笔/","text":"一、由来1、前世 其实，在一年以前我就已经用hexo加github搭建过个人的博客。去年的时候，偶然看到我一个高中好哥们的博客,他的博客就是用hexo+github搭的，不过那个时候仅仅是想作为一个相册使用，里面放的都是我自己和女朋友的一些照片。后来，懒得去维护了，空间和域名都渐渐荒废了。之前的那个博客可以算的上是这个的前世 2、今生 前段时间申请了自己的一个域名:lili-web.com,想着去阿里云买一台服务器，搭一个自己的技术博客。去阿里云上的服务器看了下价格，摸了摸自己的荷包，并且买了服务器还得去备案，麻烦~正愁着咋办，我突然想起，自己一年多用github+hexo搭建博客，不仅免费，而且不用去备案。于是开干，在网上参考了别人搭建github博客的文章，花了一天多的时间，搭建了该博客！ 二、展望1、博客 先定一个小目标，比如说。。。。。，想多了。。。。，坚持每周写一篇博客，不管是技术的还是其他的 2、go 本人是从事拍黄片工作的，感觉拍黄片能做的事还是比较局限，进来在学习golang 3、money 我博客取名叫lemon，其实是取得“来 money”的意思，简称lemon~要结婚、还贷、装修等等，到处是花钱的地方，所以要赶紧挣钱了。。。大家有网站开发类的私活可以找我哈~","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"Github+Hexo搭建博客","date":"2017-10-05T08:30:44.000Z","path":"2017/10/05/Github-Hexo搭建博客/","text":"一、环境搭建1.NodeJS 安装NodeJS：http://nodejs.cn/download/ 下载.msi文件，不需要配置环境变量 2.github 安装git ssh工具：https://git-for-windows.github.io/ 配置git环境，推荐教程：https://www.liaoxuefeng.com 3.hexo 安装Hexo: npm install -g hexo 初始化Hexo: hexo init 生成静态页面：hexo generate 或者 hexo g 启动服务器：hexo server 或者 hexo s 浏览器中访问：http://localhost:4000 二、更换主题及主题配置1.更换主题 默认主题是landscape，在themes文件夹下，可以使用别人开发好的主题，这里有很多，我使用的是这一个: https://github.com/litten/hexo-theme-yilia下载之后放到themes文件夹下即可：git clone git@github.com:litten/hexo-theme-yilia.git 2.主题基本配置 注意，主题配置修改的都是themes/yilia/_config.yml，配置项不一一解释了 3.头像和打赏配置（1）图片的位置 图片应该放在当前博客下面，比如我建了一个img文件夹，图片就放在里面，如下图所示： （2）具体配置 1234567891011#打赏# 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏reward_type: 2# 打赏wordingreward_wording: &apos;谢谢你请我吃糖果&apos;# 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpgalipay: /img/alipay.png# 微信二维码图片地址weixin: /img/wepay.png# 头像地址avatar: /img/avatar.jpg ​ 三、博客的基本配置 注意：这里修改的都是最外层的_config.yml（不是themes文件夹里面） 1.所有文章 在_config.yml中配置如下，不加的话，点击所有文章会报错 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 2.部署配置 配置到github对应的仓库中 在_config.yml中配置如下： 1234deploy: type: git repo: git@github.com:username/username.github.io.git branch: master 四、高级功能配置1、网站访问量显示（1）效果 （2） 实现 使用了不蒜子第三方的统计插件，网址：http://ibruce.info/2015/04/04/busuanzi/ 在themes\\yilia\\layout_partial下的footer.ejs中加入如下代码即可，如下所示： 12345678910111213141516171819202122&lt;footer id=&quot;footer&quot;&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div id=&quot;footer-info&quot;&gt; &lt;div class=&quot;footer-left&quot;&gt; &amp;copy; &lt;%= date(new Date(), &apos;YYYY&apos;) %&gt; &lt;%= config.author || config.title %&gt; &lt;/div&gt; &lt;div&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt; 本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次 &lt;/span&gt; &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 总访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次 &lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;footer-right&quot;&gt; &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt; Theme &lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot;&gt;Yilia&lt;/a&gt; by Litten &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/footer&gt;&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; 2、评论功能（1）效果 （2）实现 去来必力网站注册账号，https://livere.com/ 网站给的代码，如图 插入的代码需要调整下边距，不然下面的第三方登录按钮会被覆盖导致错位，我加的代码如下 1style=&quot;margin: 0 50px 0 50px&quot; 最后在themes\\yilia\\layout_partial下的article.ejs将改代码添加到&lt;% if (theme.wangyiyun){ %&gt;前面 12345678910111213141516171819202122232425&lt;!-- 来必力City版安装代码 --&gt; &lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;MTAyMC8zMTIwOS83NzU4&quot; style=&quot;margin: 0 50px 0 50px&quot;&gt; &lt;script type=&quot;text/javascript&quot;&gt; (function(d, s) &#123; var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125; j = d.createElement(s); j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;; j.async = true; e.parentNode.insertBefore(j, e); &#125;)(document, &apos;script&apos;); &lt;/script&gt; &lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt; &lt;/div&gt; &lt;!-- City版安装代码已完成 --&gt; &lt;% if (theme.wangyiyun)&#123; %&gt; &lt;%- partial(&apos;post/wangyiyun&apos;, &#123; key: post.slug, title: post.title, url: config.url+url_for(post.path) &#125;) %&gt; &lt;% &#125; %&gt; 五、域名绑定1、申请域名 本人是在阿里云上面申请的域名，注意.com域名不需要备案，.cn是国内域名，需要备案 2、域名解析 ping username.github.io，来获取你的空间的ip 添加CNAME类型的解析 添加结果如图： 3、配置到github 在博客的根目录下新建一个CNAME文件 填写申请的域名，xxx.com push到github即可 六、感谢 本文参考了Lawlite的：Hexo+Github搭建自己的博客并按照步骤一步步搭建，几个模块的搭建方法有些许不同，在Lawlite的基础上做了修改，编写了这篇博客！","tags":[{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"Hello World","date":"2017-10-05T08:00:03.681Z","path":"2017/10/05/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]